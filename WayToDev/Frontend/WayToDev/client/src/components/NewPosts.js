import React, { useState } from "react";
import "./NewPosts.css";

function NewPosts() {
	const [posts, setPosts] = useState([
		{
			_Id: "615c66033462270fc84f87ca",
			title: "Друга мова програмування вчити легше, ніж перший. Чи так це?",
			name_user: "admin",
			text: 'Головна метафора, як краще і найкоротший пояснення\nВсі думки цієї статті можна об\'єднати в одну метафору. А саме: якщо ви навчилися водити машину на механіці, то зможете керувати практично будь-яким автомобілем. Тобто ви здатні сісти не тільки за той кермо, на якому тренувалися в автошколі. Можливо, якийсь час в новому авто вам буде трохи незвично, але ви дуже швидко звикнете.\n\n\n\nПроте, якщо вам захочеться стати учасником професійних гонок на кшталт "Формули 1", тоді вам доведеться вивчити свій болід ідеально, до самого маленького гвинтика.\n\n\n\nУ розробці відбувається те ж саме: принципи однакові, а в нюансах можна розібратися досить швидко.\nЧому непросто освоїти перша мова програмування?\nСпершу навчання може йти з працею:\n\nнезрозуміло, навіщо потрібні змінні і як вони працюють;\nщо собою представляють цикли і навіщо вони потрібні в такій великій кількості;\nскладно розібратися в класах, методах;\nщо таке функції і чому в них діють свої правила;\nважко уявити, як взагалі будувати логіку ПО, щоб воно в підсумку працювало, причому так, як потрібно.\nІ все це нормально, як при будь-якому вивченні чогось нового. Новачок завжди стикається з труднощами, про яку сферу діяльності не йшла б мова.\n\n\n\nТільки з часом ви виявите, що цикли цілком передбачувані, а функції - прекрасний інструмент для вирішення різних завдань. Ще через місяць обов\'язково зрозумієте, як зібрати надійний каркас програми. І ще через стільки ж - будете на "ти" з методами і класами.\n\nМови програмування в будь-якому випадку осягаються поступово - крок за кроком. Налаштовуйтеся на те, що навчання швидким не буде, тому що вам належить освоїти багато нової для себе інформації.',
			short_text:
				"У початківців розробників часто виникає питання: як досвідченим програмістам вдалося добре освоїти кілька мов і писати відразу на двох або трьох? Відповідь насправді дуже простий.\n\nСправа в тому, що якщо у вас вийде вивчити хоча б один ЯП, то на будь-якому іншому ви зможете почати створювати не дуже складні програми буквально через півгодини знайомства. Давайте з'ясуємо, як так відбувається, і чи є з цього правила винятки.",
			picture: "https://itproger.com/img/news/1632685919.png",
			like: null,
			comment: null,
		},
		{
			_Id: "615c6b9c3462270fc84f87cd",
			title: "Кожен програміст повинен знати ці 12 речей",
			name_user: "admin",
			text: "Кожному програмісту варто знати (або вміти):\n1. Значення загальних понять. Наприклад, шаблони проектування, архітектура ПО, тестування, рефакорінг, стек і ін.\n2. Принципи ООП.\n3. Хоча б одну мову програмування на хорошому рівні. При цьому надприродного нічого не потрібно: просто вміння створювати змінні, методи, пр. Як тільки навчитеся цьому, подальше навчання піде дуже швидко.\n4. Як правильно читати код інших програмістів.\n5. Що потрібно постійно вчитися. Але інформацію споживайте якомога якіснішу. Джерело при цьому великої ролі не грає: Інтернет, підручники, книги, довідники - що завгодно.\n6. VCS - системи контролю версій. А саме основи, характерні для кожної.\n7. Ситуації, в яких можна і навіть потрібно звертатися за допомогою, і коли цього робити не варто.\n8. Як зрозуміти, яку проблему вирішувати, а яку - відкинути. Досить часто програмісти даремно витрачають свій робочий час, борючись з різними дрібницями.\n9. Не бути самолюбним і визнавати власні помилки, не беручи зауваження і критику на особистий рахунок.\n10. Мислити, як користувач. Хоч ви і програміст, не забувайте: вашими програмами користуються звичайні люди, не тільки технарі, а значить ви повинні прагнути створити для них корисний, зрозумілий і по-справжньому зручний продукт.\n11. Якісно відпочивати. Інакше продуктивної роботи не буде. Як мінімум, робіть перерви в роботі, приділяйте час улюбленому хобі і обов'язково висипайтеся.\n12. Правила командної роботи. Практично наполовину успіх в кар'єрі програмістів залежить від уміння взаємодіяти з людьми.\n\n\n\nЗвичайно ж, цей список - тільки короткий набір тих знань і умінь, які вам належить отримати. Головне, не бійтеся невідомого, що не пасуйте перед труднощами і не зупиняйтеся. Пам'ятайте, що будь-який айтішник просто зобов'язаний постійно розвиватися і стежити за новинками індустрії. Так що активно удосконалюйтеся і звикайте до того, що робити це доведеться завжди.",
			short_text:
				'Питання "що повинен знати розробник?" неймовірно популярний. І ми зібрали для вас дюжину кращих на нього відповідей. Розуміння цих питань відмінно допоможе вам як в навчанні, так і в роботі.\n\nКожен, хто тільки починає писати код, напевно багато раз задається питанням про те, якого рівня знань йому необхідно досягти. З базовим набором не так вже й складно визначитися, і в цьому вам якраз допоможе дана добірка. Вона універсальна і не залежить від мови програмування, середовища або операційної системи.',
			picture: "https://itproger.com/img/news/1632100074.jpg",
			like: null,
			comment: null,
		},
		{
			_Id: "615c6dab3462270fc84f87cf",
			title: "11 класних GitHub-репозиторіїв для ваших проектів",
			name_user: "admin",
			text: "1. Lottie-Web / Bodymovin\nЦей інструмент - один з моїх улюбленців. Бібліотека дозволяє завантажувати анімацію з Adobe After Effects відразу на сторінки вашого сайту.\n\n2. Vue / React Content Loader\nЯвляє собою SVG-компонент, призначений для додавання плейсхолдера завантаження (за прикладом карток Фейсбук).\n\n3. Magic Grid\nДана бібліотека здатна створювати адаптивну сітку для завдання стилів без @media. Вам потрібно буде просто вибрати для неї контейнер і все - результат готовий.\n\n4. Hover.css\nНover-ефекти, доступні на CSS-препроцесорів Sass і LESS, для посилань, кнопок, графічних SVG-файлів та ін. Додавайте їх до будь-яких елементів або просто використовуйте колекцію для натхнення.\n\n5. React Image Gallery\nЕлемент «карусель» для прокрутки і перегляду зображень.\n\n6. RELLAX\nПроста JS-бібліотека для реалізації ефекту паралакса. Зараз працює і на смартфонах, планшетах.\n\n7. React Motion\nПроблем з анімацією у вас точно більше не буде. З цим репозиторієм не потрібно точно описувати всі кадри в 90% випадків. Задайте значення тільки двома параметрами призначеного для користувача інтерфейсу: damping і stiffness. Все інше зробить магія фізики. Так що, про дрібниці можна не переживати. Це крім іншого сильно спрощує процес роботи з програмним інтерфейсом додатку (API).\n\n8. SVG.js\nПопулярна легковага бібліотека, яка дозволяє працювати з SVG, що не впроваджуючи залежності.\n\n9. mo · js\nІнструмент надає компоненти, які потрібні для оформлення анімації. У цій бібліотеці є все, щоб зробити її максимально природною і гармонійною.\n\n10. Reveal.js\nФреймворк з відкритим вихідним кодом для створення HTML-презентацій. Він дає можливість робити повнофункціональні проекти прямо в браузері.\n\n11. Zdog\nЦю бібліотеку дуже просто освоїти. При цьому вона неймовірно корисна! З її допомогою можна створювати 3D-об'єкти навіть без специфічних математичних знань.\n\nНа закінчення\nПочатківцям frontend-розробникам ми радимо частіше використовувати такі готові рішення. Особливо коли мова йде про реалізацію важких завдань. Так у вас вийде уникнути багатьох зайвих проблем. Винаходити заново велосипед зовсім не обов'язково!",
			short_text:
				"Хочемо розповісти вам про репозиторіях GitHub, які дозволяють значно поліпшити будь-який сайт. З їх допомогою ви зможете додавати не тільки складні анімації, але й багато різних корисних функцій.",
			picture: "https://itproger.com/img/news/1632095805.jpg",
			like: null,
			comment: null,
		},
		{
			_Id: "615c6e7c3462270fc84f87d0",
			title: "Найпопулярніші міфи про програмістів",
			name_user: "admin",
			text: "Міф №1. Кожен програміст вміє робити все\nБагато хто думає, що в ІТ все просто: можеш писати код - значить, здатний втілити в життя будь-яку програму. Звичайно ж, це помилка. Тільки на перших порах розробників було небагато і вони володіли однаковими навичками. Це логічно, оскільки можливості в галузі різноманітністю ще не відрізнялися. Зараз все по-іншому. Мов програмування стало більше. Старі йдуть, на їх місце приходять нові, досконаліші. А розробники спеціалізуються на певній сфері і працюють з різними наборами інструментів.\n\nМіф №2. Це чоловіча професія\nЗвичайно, є професії, які більше підходять або для чоловіків, або для жінок. І навіть не дивлячись на рівні права, деякі види діяльності не мають однаковою популярністю у представників різної статі. Крім того, свій вплив надають традиції і стереотипи. Але зараз серед розробників є досить багато жінок. І в міру розвитку ІТ їх число швидко збільшується.\n\nМіф №3. Всі програмісти не від світу цього\nЗаглибленість у свій внутрішній світ - це особливість характеру. І іноді це поєднується з сильною захопленістю своєю роботою. У такому випадку люди часто навіть у вільний час думають про справи і как-будто випадають з реальності. У такому стані вони цілком можуть пропустити смішний анекдот, який ви їм розкажіть, чи проігнорують прохання. Через це оточуючим вони часом здаються дивними. І саме такими люди часто бачать програмістів. Але насправді в ІТ, як і всюди, є найрізноманітніші персонажі. А крайня захопленість і трудоголізм до диплому продаються окремо.\n\nМіф №4. Кожен здатний стати розробником\nОпанувати професію складно. Для того, щоб вивчити мови програмування і вміло користуватися ними, потрібен особливий склад розуму, терплячість, винахідливість і вміння не пасувати перед труднощами. А для побудови успішної кар'єри потрібно ще більше, адже до програмістам пред'являються дуже високі вимоги. Неякісну роботу ніхто оплачувати не буде. Плюс до всього, сфера ІТ розвивається вкрай швидко, а це значить, програмістам потрібно безперервно розвиватися, вчитися новому, вдосконалювати свої навички і розширювати використовуваний інструментарій. Так що, розробка точно підійде не всім.\n\nМіф №5. Зарплата програмістів обчислюється мільйонами\nЯкщо комусь і пощастило отримувати таку зарплату, то точно один на мільйон. А російським новачкам після стажування платять близько 50 000 рублів (в Москві 70-90 тис.). Праця більш досвідчених фахівців, звичайно ж, коштує дорожче. Великий вплив на добробут розробника впливає його вміння домовлятися. Але, як би там не було, мільйонна зарплата - це всього лише один з міфів.\n\nТаким чином, програміст - звичайна професія, як і більшість інших. Щоб увійти в неї, потрібно володіти певними здібностями, а не просто бути \"хлопчиком\". І хороші розробники дійсно гідно заробляють. Тому, якщо відчуваєте бажання і сили, сміливо приступайте до навчання. Не звертайте увагу на міфи - нехай ніякі помилки вас не зупиняють!",
			short_text:
				'Розробник - молода професія, яка, до того ж, швидко розвивається. А люди продовжують вірити в давно застарілі міфи, про які ми зараз і поговоримо.\n\nЩе на початку другої половини минулого століття програмістів було дуже мало. Тепер їх налічується понад 23 мільйонів, і це число постійно зростає. Природно, що така популярна і відносно молода професія обросла великою кількістю міфів. У тих, хто далекий від світу ІТ, слово "програміст" оповите барвистими, але часто застарілими асоціаціями. Такі люди діляться один з одним неперевіреною або вже не актуальною інформацією, що і призводить до виникнення міфів про розробників.\n\n\n\nСтаття буде корисна тим, хто думає, чи варто присвячувати себе цій професії.',
			picture: "https://itproger.com/img/news/1630274397.png",
			like: null,
			comment: null,
		},
		{
			_Id: "615c6fd41dc63326d2e5faaa",
			title: "Чому Java-програміст - найкраща професія в ІТ для новачка",
			name_user: "admin",
			text: "Що значить бути Java-розробником?\nСпершу поговоримо про основи. Що таке Java? Напевно ви розумієте, що в першу чергу це ЯП (мова програмування), але також він є і платформу для реалізації Діджитал проектів. Java багатофункціональний, сумісний майже з усіма носіями і тому підходить для створення найрізноманітніших продуктів: від мобільних програм до повноцінних серверів і т.п.\n\nJava-розробники - айтішники, які вивчили цю мову разом з однойменною платформою і створюють з її допомогою ПО, редагують вже існуюче або дають друге життя застарілими проектами.\n\nДаний фахівець відповідальний і за наступні етапи роботи над програмним продуктом. Після реалізації програми необхідно її протестувати, виправити виявлені помилки і знову протестувати. Якщо є потреба - русифікувати, після чого запровадити.\n\nJava підходить для написання серверів, веб-сайтів, мобільних додатків, ігор і навіть для дата інжинірингу в процесі роботи з Big Data.",
			short_text:
				"У сфері розробки ПЗ є величезна кількість професій, з яких молодий фахівець може почати свій шлях. Один з найкращих таких варіантів - це безперечно Java.",
			picture: "https://itproger.com/img/news/1629452169.jpg",
			like: null,
			comment: null,
		},
		{
			_Id: "615c70901dc63326d2e5faab",
			title: "Яку мову програмування варто вчити в 2022 році?",
			name_user: "admin",
			text: "Unity (C #)\nУ світі немає більш популярної платформи для розробки інтерактивного контенту, ніж Unity. За допомогою цієї мови створюються:\nгри для 30 різних платформ, операційних систем і ігрових приставок;\nпродукти з області доповненої і віртуальної реальності;\nкомп'ютерна графіка для кіно;\nдизайн транспорту;\nсимуляція робототехніки;\nпроекти будинків.\nЦе означає, що володіючи Unity (C #) можна знайти роботу в будь-який з перерахованих вище галузей\nДоходи світового ринку відеоігор з 2012 по 2021 рік\nЯк видно на цій діаграмі, доходи глобального ринку відеоігор в період з 2012 по 2021 рік росли щороку із середнім темпом в 11%.\nЗгідно з правилом 72, якщо темпи зростання збережуться, нинішня вартість ринку відеоігор збільшиться в 2 рази через 6,55 року. Так що найближчим часом попит на розробників, які володіють Unity, не тільки не зменшиться, але і безумовно буде збільшуватися. Більш того, зовсім скоро Unity спровокує нову еволюцію технологій доповненої і віртуальної реальності.\nОсвоїти мову C # не складно, якщо мова йде про рівень, що дозволяє створити 3D-додаток або просту гру. Зараз в Мережі є безліч доступних навчальних посібників і курсів.\n\nВи можете заперечити: у Unity є дуже сильний конкурент - Unreal Engine. І це дійсно більш висококласний движок, але досконально оволодіти ним набагато складніше.\n\nFlutter (Dart)\nКому не хотілося б опублікувати свій додаток одночасно на декількох платформах (або навіть багатьох) з використанням єдиного коду? За допомогою Flutter 2.0 можна створювати додатки відразу для Android, iOS і Web. Цей фреймворк працює всюди, де присутня браузер: на смартфонах, ПК і т.д.\n\nЗвичайно, найчастіше більш ефективно буде використовувати для кожної платформи її рідна мова, наприклад Java для Android. Але у Flutter ви зможете без проблем реалізувати всі ті ж самі функції.\n\nГоловним конкурентом Flutter є React Native: за швидкістю, рівнем складності та розмірами спільноти вони практично рівні.\n\nОднак за популярністю Flutter вирвався вперед, зібравши в середині 2021 року 124к зірок на Github проти 96К у React Native.\n\nGolang\nПродукт компанії Google, який має масу переваг:\nвідноситься до числа найшвидших ЯП, тому що є компільовані;\nпідтримується корпорацією Google;\nпростий для вивчення;\nволодіє великим співтовариством;\nпрекрасно підходить для backend, full stack і DevOps-розробників;\nне перевантажений, відрізняється мінімалізмом і зрозумілим синтаксисом;\nзаймає 3 місце за рівнем медіанної заробітної плати програмістів.\n\nДані опитування, опублікованого на порталі Stack Overflow в 2020 році\n\nGolang підтримує високий паралелізм, багатопоточність, відмінну продуктивність і масштабованість. Він ідеально сумісний з хмарними обчисленнями. А так як ринок публічних хмарних обчислень стрімко розширюється, попит на хороших DevOps-розробників буде рости щороку.\n\nвисновки\nНе пропустіть свій шанс скористатися стрімким зростанням будь-якого з цих мов програмування - їх потенціал очевидний! Навіть якщо ви не новачок, і вже використовуєте більш старі ЯП на кшталт PHP, Java і Ruby, вам все одно буде неймовірно корисно вивчити який-небудь інноваційний інструмент для розвитку своєї кар'єри і підвищення рівня доходу.",
			short_text:
				"У сфері програмного забезпечення за останні роки з'явилося багато принципово нових і дуже перспективних напрямків. Це означає, що розробникам є куди рости і як розвиватися.",
			picture: "https://itproger.com/img/news/1631479936.jpg",
			like: null,
			comment: null,
		},
		{
			_Id: "615c7b8b3f6898779205c21a",
			title: "Наповнюємо портфоліо: 12 ідей для Python-проектів",
			name_user: "admin",
			text: '1. Розумний асистент\nОдин з кращих проектів, тому що він покаже інтерв\'юеру, що ви відмінний пітоніст: вмієте правильно розпоряджатися ресурсами і перетворювати їх на щось корисне. Разом з тим, для створення асистента не потрібно бути супер фахівцем. Вам вистачить знання щодо простих і доступних пакетів\nНаприклад, можна скористатися Pyttsx3 для реалізації функції розпізнавання тексту. А з модулем os налаштувати програвання музичних файлів, запуск програм та ін. Функціонал програми добре доповнить автоматизація рутинних завдань і агрегатор сайтів - завдяки їм ваш проект стане виглядати солідніше.\nАле кінцевої точки у асистента немає. Чим різноманітніше функції, тим більше корисний виходить результат.\n\n2. Автоматор завдань\nАналог першого варіанту, але з ухилом в автоматизацію. Які завдання можна автоматизувати? Наприклад, управління файлами: перемістити, копіювати, видалити і перейменувати. Або створіть скрипт, висилаємо привітання з днем ​​народження. Як інструменти візьміть такі бібліотеки: Selenium (пакет для автоматизації взаємодії веб-браузера та Python), BeautifulSoup (веб-скрейпінг), win10toast (виведення повідомлень Windows), пр.\n\n3. Веб-сайт\nСтворення свого сайту теж відмінна ідея. Можна зупинитися на "звичайному" варіанті: платформа для здійснення електронних платежів, портал для навчання тощо Але можна спробувати розробити ресурс, який буде автоматизувати якісь щоденні завдання. Наприклад, конвертація текстових файлів в аудіо або автоматична відправка електронних листів. Напевно у вас вийде придумати багато цікавих і практичних ідей! Просто не бійтеся реалізувати їх.\n\n4. Гра\nРозробка ігор вимагає посидючості, великої кількості часу і навичок. Зате що може бути цікавіше? Гра здатна дуже багато розповісти про свого автора: про його винахідливості, креативності і зібраності. А якість продукту відмінно демонструє знання програмування. Є багато Python-бібліотек для тих, хто займається цим видом діяльності: переходьте по посиланню і вибирайте те, що підходить саме вам.\n\n5. Графічний інтерфейс користувача\nСтворення GUI - класний проект і відмінний спосіб добре зарекомендувати себе при прийомі на роботу. Графічний користувальницький інтерфейс - це система взаємодії ПО і користувача. Тобто то, що людина бачить і за допомогою чого "спілкується" з програмою.\nЗайдіть в найближчі магазини, дізнайтеся, в яких програмах вони потребують, і створіть ПО з GUI, яке задовольняло б цим запитам. Запам\'ятайте: чим краще призначений для користувача інтерфейс, тим краще враження на людей справляє ваша програма. А це означає, що шанси заробити на ній хороші гроші сильно підвищуються!\nЗ усіх бібліотек Python, які призначені для розробки GUI, найпопулярнішою є Tkinter. Єдиний мінус - новачкам в ній не так просто розібратися. Але крім Tkinter є багато інших класних GUI-бібліотек, познайомитися з якими можна тут.\n\n6. Система комп\'ютерного зору\nМашинне зір - один з головних сучасних трендів. Майже всі великі компанії в тому чи іншому вигляді впроваджують його в свої технології. У цій області є маса успішних стартапів. Але головне те, що реалізуючи таку модель, ви продемонструєте роботодавцю свою здатність швидко освоювати ІТ-новинки.\nМашинне зір можна застосовувати в різних областях: розпізнавання осіб, визначення хвороб на основі рентгенівських знімків, оцінка дорожнього руху і т.д. В процесі роботи над таким ПО вам сильно допоможуть Python-бібліотеки. Від себе можемо порадити одну з найкращих - це OpenCV.\n\n7. Програма-аналізатор настрою\nЩо таке настрій? Це наші думки, емоції і почуття, які бувають негативними, нейтральними та позитивними. Аналіз настрою відноситься до сфери NLP - обробки природної мови. Якщо говорити про ідеї, то можна реалізувати додаток, що визначають настрій людини по залишеному їм відкликанню. Таке розпізнавання придасться в багатьох випадках: для магазинів, сайтів, кафе, салонів краси, автомайстерень та ін.\nТут вам знадобляться такі бібліотеки, як TextBlob, Natural Language Toolkit, Gensim, spaCy, і StanfordNLP.\n\n8. Пошуковий бот\nЦя програма час від часу переглядає веб-сайти і витягує з них необхідну інформацію. Можна створити бота, який би порівняв вартість товарів в інтернет-магазині і надає посилання на картку з самим недорогим варіантом. Крім того, він може стежити за змінами цін і відправляти користувачеві повідомлення, коли вони знижуються або стартують розпродажі.\nТакий продукт буде прикрасою будь-якого портфоліо. А щоб його створити, скористайтеся бібліотеками BeautifulSoup і requests.\n\n9. Бот для кріпторинка або торгівлі акціями\nТакий проект стане не тільки прекрасною практикою, але і потенційною можливістю отримувати високий дохід. Ми говоримо про боті, який здійснює алгоритмічний трейдинг, тобто автоматично набуває і продає акції або криптовалюта',
			short_text:
				"Хорошу роботу в ІТ можна отримати і без диплома про вищу освіту. Адже кар'єра вдало будується не на папірцях, а на власні навички, найкращим доказом яких будуть реальні проекти.\n\nЗараз ми розберемо 12 ідей для створення проектів на мові Python, які ідеально впишуться в ваше портфоліо. Причому всі вони з різних сфер і трохи розрізняються за складністю.",
			picture: "https://itproger.com/img/news/1627852389.jpeg",
			like: null,
			comment: null,
		},
	]);

	return (
		<div className="newPosts">
			<div className="container">
				<h1>New posts</h1>

				<section className="posts">
					{posts.map((post) => (
						<article key={post._Id}>
							<img src={post.picture} alt={post.title} />
							<div className="postInfo">
								<h3>{post.title}</h3>
								<p>{post.short_text}</p>
								{/* <div className="additionalInfo">
									<div className="postViews">
										<i class="fas fa-eye"></i>
										<span>{post.views}</span>
									</div>
									<div className="postDate">
										<i class="far fa-clock"></i>
										<span>{post.date}</span>
									</div>
								</div> */}
							</div>
						</article>
					))}
				</section>
			</div>
		</div>
	);
}

export default NewPosts;
